{
	"group_class_re": "^(Static)?(Ref)?(Meta)?Group$|^Cluster$",

	/********************************************************************************************
		Map classic class names to their XL equivalents (where there is a difference)
	*********************************************************************************************/

	"class_name_map": {
		"Application": "ApplicationComponent",
		"ApplicationServer": "ApplicationComponent",
		"VirtualApplication": "Service",
		"Zone": "AvailabilityZone"
	},


	"excluded_template_names_re": "^(AVG:|MAX:|restored-vm-)",

	"excluded_template_classes": [ ],

	"excluded_template_resources": {
		"storageResources": [ "numDiskSize", "storageAmount" ]
	},


	/********************************************************************************************
		SqLite RE for groups to be excluded.
		NB: the array elements are joined using a "|" before use to make a single RE string
	*********************************************************************************************/

	"excluded_group_names_res": [
		"^AvailabilitySet::",
		"^AzureScaleSet::",
		"^GROUP-DESKTOPPOOL-",
		"^Region .* Expired Promo Templates$",
		"^Sellers-Group-GROUP-DRS-",
		"^Buyers-Group-GROUP-DRS-",
		"-vSAN-Cluster-"
	],


	/********************************************************************************************
		JS RegExps that identitify placement policies to be excluded. Policies who's displayName
		matches any of these wont even be stored in the DB file.
	*********************************************************************************************/

	"excluded_settings_policy_name_res": [
		"(Cloud Compute Tier Exclusion|Consistent Scaling) Policy \\(account [0-9]+\\)$",
		"^Imported HA settings for ",
		"^HA Settings for PMs with Mem threshold ",
		"^Buyers-Group-HANodes-.*?::Policy$",
		"^AvailabilitySet::",
		"^AzureScaleSet::",
		"^Region .*? Expired Promo Templates::Policy$",
		"^VMs_Accelerated Networking Enabled_.*?::Policy$"
	],


	/********************************************************************************************
		JS RegExps that identitify placement policies to be excluded. Policies who's displayName
		matches any of these wont even be stored in the DB file.
	*********************************************************************************************/

	"excluded_placement_policy_name_res": [
		"/.*?-vSAN-Cluster-"
	],

//	/********************************************************************************************
//		Classic "system groups" that cannot be created in XL under any circumstances, and so
//		cannot be used as scopes. These are listed by their fixed UUIDs
//	*********************************************************************************************/
//
//	"unmigratable_group_names": [
//		"GROUP-MyGroups"
//	],

	/********************************************************************************************
	*********************************************************************************************/

	"template_name_map": {
		"VirtualMachine": {
			"Large": "Large VM",
			"Small": "Small VM",
			"Medium": "Medium VM"
		},
		"PhysicalMachine": {
			"Large": "Large Host",
			"Small": "Small Host",
			"Medium": "Medium Host"
		},
		"Storage": {
			"Large": "Large Storage",
			"Small": "Small Storage",
			"Medium": "Medium Storage"
		}
	},

	"standardize_target_display_name": {
		"AppDynamics": {
			"js": "function(name) { return name.replace(/[,-][0-9]+$/, ''); }"
		}
	},

	/*********************************************************************************************
		Map the target type used in Classic to it's XL equivalent (if different)
	*********************************************************************************************/

	"target_type_map": {
		"EMC XtremIO": "EMC XtremIO SDK"
	},

	/********************************************************************************************
		Some targets specs are different enough between Classic and XL that we need to apply some
		target-specific logic to "cook" the Classic spec and convert it to something XL can eat.
		Note: the map key is the CLASSIC type, not the XL one.
	*********************************************************************************************/

	"target_cooker_script_map": {
		"AWS": "aws-cooker.js",
		"Azure Service Principal": "simple-defaults-cooker.js",
		"vCenter": "vcenter-cooker.js",

		/* the next 3 entries are now redundant. The scope-cooker.js is automatically called for any scoped target */
		"SNMP": "scope-cooker.js",
		"WMI": "scope-cooker.js",
		"SQLServer": "scope-cooker.js",

		"AppDynamics": "simple-defaults-cooker.js",
		"Dynatrace": "simple-defaults-cooker.js",
		"Nutanix": "simple-defaults-cooker.js",
		"CloudFoundry": "simple-defaults-cooker.js",
		"JBoss": "jboss-cooker.js"
	},

	/*
	 * From "com/vmturbo/topology/processor/migration/V_01_01_05__Target_Common_Proxy_Settings" ..
	 *
	 * Rename configuration.
     * --------------------
     * TYPE                     CLASS (AccountDefinition)                                 FIELDS TO UPDATE          FIELDS TO KEEP
     * ----                     -------------------------                                 ----------------          --------------
     * AWS                      com.vmturbo.mediation.aws.client.AwsAccountBase           proxy,port,proxyUser
     * AWS Billing              com.vmturbo.mediation.aws.billing.AwsBillingAccount       proxy,port,proxyUser
     * AWS Cost                 com.vmturbo.mediation.aws.cost.AwsCostAccount             proxy,port,proxyUser
     * Azure Subscription       com.vmturbo.mediation.azure.AzureAccount                  proxy,port,proxyUser
     * Azure Cost               com.vmturbo.mediation.azure.cost.AzureCostAccount         proxy,port,proxyUser
     * Azure EA                 com.vmturbo.mediation.azure.ea.AzureEAAccount             proxyUser                  proxyHost,proxyPort
     * Azure Service Principal  com.vmturbo.mediation.azure.sp.AzureSPAccount             proxyUser                  proxyHost,proxyPort
     * GCP                      com.vmturbo.mediation.gcp.client.GcpAccount               proxy,port,proxyUser
     * GCP Cost                 com.vmturbo.mediation.gcp.cost.GcpCostAccount             proxy,port,proxyUser
     * Pivotal Ops Manager      com.vmturbo.mediation.pivotal.opsman.PivotalOpsmanAccount proxy                      proxyPort
     * ServiceNow               com.vmturbo.mediation.servicenow.ServiceNowAccount        proxyUser                  proxyHost,proxyPort
     * AppInsights              com.vmturbo.mediation.appinsights.AppInsightsAccount      proxy,port,proxyUser
	 *
	 * From "com/vmturbo/topology/processor/migration/V_01_01_06__Target_Common_Proxy_Settings_Additional" ..
     * Rename configuration.
     * --------------------
     * TYPE                     CLASS (AccountDefinition)                                 FIELDS TO UPDATE          FIELDS TO KEEP
     * ----                     -------------------------                                 ----------------          --------------
     * AWS Lambda               com.vmturbo.mediation.aws.client.AwsAccountBase           proxy,port,proxyUser
     * Azure Wasted Volumes     com.vmturbo.mediation.azure.AzureAccount                  proxy,port,proxyUser
     * Intersight               com.vmturbo.mediation.intersight.base.IntersightAccount   proxy                      proxyPort
     * Intersight UCS           com.vmturbo.mediation.intersight.base.IntersightAccount   proxy                      proxyPort
     * Intersight Hyperflex     com.vmturbo.mediation.intersight.base.IntersightAccount   proxy                      proxyPort
     */

	// The commented-out ones will never be migrated from classic
	"rename_target_fields": {
		"AWS": 					{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
		"AWS Billing": 			{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
	//	"AWS Cost":				{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
	//	"AWS Lambda":			{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
	//	"Azure Subscription":	{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
	//	"Azure Cost": 			{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
	//	"Azure EA": 			{ "proxyUser": "proxyUsername"},
		"Azure Service Principal": { "proxyUser": "proxyUsername" },
		"Azure Wasted Volumes":	{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
		"GCP":		 			{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
	//	"GCP Cost":	 			{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
		"Pivotal Ops Manager":	{ "proxy": "proxyHost" },
		"ServiceNow":			{ "proxyUser": "proxyUsername" },
		"AppInsights":			{ "proxy": "proxyHost", "port": "proxyPort", "proxyUser": "proxyUsername"},
		"JBoss":                { "nameOrAddress": "targetEntities", "targetPort": "port" }
	//	"Intersight":           { "proxy": "proxyHost" },
	//	"Intersight UCS":       { "proxy": "proxyHost" },
	//	"Intersight Hyperflex": { "proxy": "proxyHost" },
//		"CloudFoundry":			{ "proxy": "proxyHost", "port": "proxyPort" }
	},


	/********************************************************************************************
		Fields to use default values for in ANY target that has them in XL but not in classic.
	*********************************************************************************************/

	"add_target_field_default": [ "secureProxy" ],

	/********************************************************************************************
		If targets of any of the types listed below are included in the migration, we check that
		discovery is complete by looking to see whether they have created the listed groups (they
		always do). Note : a "#" in the key is effectively commenting out the entry. The string
		against each type key must be a list of RE matches that the XL /search API call accepts
		in it's "q=" argument.
	*********************************************************************************************/

	"target_types_that_always_create_groups": {
		"AWS": [
			"^Virtual machines attached to",
			"^instance..dStorageCluster\\$",
			"^elasticStorageCluster$"
		],
		"Azure EA": [
			"\\([0-9][0-9]*\\)$"
		],
		"# Azure Subscription": [],
		"vCenter": [
			"^Discovered virtual machine$"
		],
		"VMM": [
			"^VMM-DC-",
			"^Hyper-V Datacenter",
			"^PMs with Mem threshold",
			"^ReplicaSet$"
		]
	},

	/********************************************************************************************
		Targets that have the billing features embedded in them in classic, but for which a
		separate target is needed in XL. "type" is the type of the billing target. "fields" is
		the list of fields from classic which (if populated) indicate that the billing target
		should be created.
	*********************************************************************************************/

	"split_billing_targets": {
		"AWS": {
			"type": "AWS Billing",
			"fields": [ "bucketName", "bucketRegion", "reportPathPrefix"]
		}
	},

	/********************************************************************************************
		Timeouts for various parts of the process.
		Values must be specified using syntax like "15s", "10m", "2h" - etc
	*********************************************************************************************/

	"timeouts": {
		"create_target": "5m"
	}
}
